# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. 
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: Sidewalk Nordic hardware cloud setup 

Resources:

  PolicySidewalkNordicPipelinePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "IoT Core policy to access IoT Analytics"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "iotanalytics:BatchPutMessage"
            Resource: 
              - !Join [
                  "",
                  [
                      "arn:aws:iotanalytics:",
                       Ref: "AWS::Region",
                       ":",
                       Ref: "AWS::AccountId",
                       ":channel/",
                       !Ref SidewalkNordicDataChannel
                ],
              ]
              
  RoleSidewalkNordicPipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "IoT Core role to access IoT Analytics"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - iot.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: PolicySidewalkNordicPipelinePolicy

  RoleSidewalkNordicDestinationPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy to get data from iotwireless devices"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "iot:DescribeEndpoint"
              - "iot:Publish"
            Resource: "*"
        
  RoleSidewalkNordicDestinationRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Role to get data from iotwireless devices"    
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - iotwireless.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: RoleSidewalkNordicDestinationPolicy
        
  PolicySidewalkLambdaFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy to have Lambda functions publish iot / iotwireless data"    
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "iot:Publish"
              - "iotwireless:SendDataToWirelessDevice"
            Resource: "*"
            
  RoleSidewalkLambdaFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Role to have Lambda functions publish iot / iotwireless data"    
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - iot.amazonaws.com
            - lambda.amazonaws.com
            - iotanalytics.amazonaws.com
            - iotwireless.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: PolicySidewalkLambdaFunctionPolicy
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  PolicySidewalkRepublishPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: "Policy to have IoT Rules republish data"    
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "iot:Publish"
            Resource: "*"
            
  RoleSidewalkRepublishRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Role to have IoT Rules republish data"    
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - iot.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - Ref: PolicySidewalkRepublishPolicy
        
  SidewalkNordicDestination:
    Type: "AWS::IoTWireless::Destination"
    Properties:
      Description: "Send sidewalk messages to AWS IoT Rules"
      ExpressionType: "RuleName"
      Expression: !Ref SidewalkNordicIoTActionRule
      Name: "SidewalkNordic"
      RoleArn: 
        Fn::GetAtt: [ RoleSidewalkNordicDestinationRole, "Arn" ]  
        
  SidewalkNordicDataChannel:
    Type: "AWS::IoTAnalytics::Channel"
    Properties:
      RetentionPeriod:
        Unlimited: false
        NumberOfDays: 30
        
  SidewalkNordicDatastore:
    Type: "AWS::IoTAnalytics::Datastore"
    Properties:
      RetentionPeriod:
        Unlimited: false
        NumberOfDays: 30  
        
  SidewalkNordicDataPipeline:
    Type: "AWS::IoTAnalytics::Pipeline"
    Properties:
      PipelineActivities:
        -
          Channel:
            Name: "ChannelActivity"        
            ChannelName: !Ref SidewalkNordicDataChannel
            Next: "TransformActivity"
          Lambda:
            Name: "TransformActivity"
            LambdaName: !Ref SidewalkNordicTransformFunction
            BatchSize: 1
            Next: "DatastoreActivity"
          Datastore:
            Name: "DatastoreActivity" 
            DatastoreName: !Ref SidewalkNordicDatastore

  SidewalkNordicDatasetReporting:
    Type: "AWS::IoTAnalytics::Dataset"
    Properties:
      RetentionPeriod:
        Unlimited: false
        NumberOfDays: 30    
      Actions:
        -
          ActionName: "SqlAction"
          QueryAction:
            SqlQuery: !Join
              - ''
              - - 'select WirelessDeviceId, PayloadData, RealTime from '
                - !Ref SidewalkNordicDatastore
      Triggers:
        -
          Schedule:
            ScheduleExpression: "cron(0 * * * ? *)"
    DependsOn: SidewalkNordicDatastore

  SidewalkNordicIoTActionRule:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Description: "Routes device data"
        Sql: SELECT *, parse_time("yyyy-MM-dd'T'HH:mm:ss.SSSZ", timestamp()) as RealTime
        AwsIotSqlVersion: "2016-03-23"
        RuleDisabled: False
        Actions:
          - IotAnalytics:
              ChannelName: !Ref SidewalkNordicDataChannel
              RoleArn:
                Fn::GetAtt: [ RoleSidewalkNordicPipelineRole, "Arn" ]
          - Lambda:
              FunctionArn:
                Fn::GetAtt: [SidewalkNordicProcessFunction, "Arn"]   
          - Republish:
              RoleArn:
                Fn::GetAtt: [ RoleSidewalkRepublishRole, "Arn" ]
              Topic: '/Sidewalk_Nordic_Republish/'
                     
  IoTProcessLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt SidewalkNordicProcessFunction.Arn
      Action: lambda:InvokeFunction
      Principal: iot.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt SidewalkNordicIoTActionRule.Arn
      
  IoTTransformLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: !GetAtt SidewalkNordicTransformFunction.Arn
      Action: lambda:InvokeFunction
      Principal: iotanalytics.amazonaws.com     

  SidewalkNordicProcessFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Lambda Function to process data from hardware and send response"        
      Handler: index.handler
      Role: !GetAtt RoleSidewalkLambdaFunctionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: 
          !Sub 
            - |-
              #!/usr/bin/env python3

              import json
              import pkg_resources
              # We need this package of boto3 or later for iotwireless
              pkg_resources.require('boto3==1.17.42')
              import boto3
              import logging
              import os
              import random
              import base64

              logger = logging.getLogger()
              logger.setLevel(logging.INFO)

              wirless_client = boto3.client('iotwireless')
              message_id = 0

              def encode_message(message):
                message_bytes = message.encode('ascii')
                base64_bytes = base64.b64encode(message_bytes)
                base64_message = base64_bytes.decode('ascii')
                return base64_message

              def decode_message(base64_message):
                base64_bytes = base64_message.encode('ascii')
                message_bytes = base64.b64decode(base64_bytes)
                message = message_bytes.decode('ascii')
                return message


              def handler(event, context):
                global message_id 
                message_id = message_id + 1

                print(event)
                device_data = decode_message(event["PayloadData"])
                device_id = event["WirelessDeviceId"]

                int_data = int(device_data, 16)

                print ("WirelessDeviceId : ", device_id)
                print ("PayloadData : ", int_data)

                returnData = int_data + 10
                str_rtn = str(returnData)
                print ("ReturnData : ", str_rtn)
                encodeReturn = encode_message(str_rtn)
                print ("encodeReturn : ", encodeReturn)  

                wirelessmetaData = {}
                wirelessmetaData["Sidewalk"] = {"Seq": message_id} 
                print ("WirelessMetaData", wirelessmetaData)

                # This will be for real device
                response = wireless_client.send_data_to_wireless_device(
                  Id=device_id,
                  PayloadData=encodeReturn,
                  TransmitMode=0,
                  WirelessMetadata=wirelessmetaData
                  )   

                print ("Response")
                print(response)

                return                         
            -
              lambda_function_role_arn: !Ref RoleSidewalkLambdaFunctionRole

  SidewalkNordicTransformFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Lambda Function to decode data from hardware"       
      Handler: index.handler
      Role: !GetAtt RoleSidewalkLambdaFunctionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: 
          !Sub 
            - |-
              #!/usr/bin/env python3

              import logging
              import base64
              
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              
              def decode_message(base64_message):
                base64_bytes = base64_message.encode('ascii')
                message_bytes = base64.b64decode(base64_bytes)
                message = message_bytes.decode('ascii')
                return message

              def handler(event, context):                
                logger.info("event before processing: {}".format(event))
                  
                for e in event:  
                  if 'PayloadData' in e:
                    device_data = decode_message(e['PayloadData'])
                    e['PayloadData'] = device_data
    
                logger.info("event after processing: {}".format(event))
              
                return event                
            -
              lambda_function_role_arn: !Ref RoleSidewalkLambdaFunctionRole
